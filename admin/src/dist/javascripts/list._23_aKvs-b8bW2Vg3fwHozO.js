/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/public/javascripts/interactive/list.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/public/javascripts/interactive/list.js":
/*!****************************************************!*\
  !*** ./src/public/javascripts/interactive/list.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nif (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent)) {\n  window.onload = function (params) {\n    for (var i = 0; i < document.getElementsByClassName('el-dialog').length; i++) {\n      document.getElementsByClassName('el-dialog')[i].style.width = '100%'; //iframe 里面的class \n    }\n\n    for (var _i = 0; _i < document.getElementsByClassName('w400').length; _i++) {\n      document.getElementsByClassName('w400')[_i].style.width = '100%'; //限定的表单宽度\n    }\n  };\n}\n\nwindow.addEventListener('pageshow', function (params) {\n  var _methods;\n\n  var par = params.target.URL.split('*').length > 1 ? params.target.URL.split('*')[0] : params.target.URL;\n  var _ref = [parent.all.jq, parent.all.json, // parent.document.getElementById('tagHref').getAttribute('src').replace('..', '/manage').split('?')[0],\n  '/manage' + par.substring(par.lastIndexOf('/'), par.lastIndexOf('?') == -1 ? par.length : par.lastIndexOf('?')), document.getElementById('c-container-list').getAttribute('data-uri')],\n      $ = _ref[0],\n      token = _ref[1],\n      u = _ref[2],\n      uri = _ref[3];\n  var _data = {\n    id: ym.init.COMPILESTR.decrypt(token.id),\n    token: ym.init.COMPILESTR.decrypt(token.asset),\n    url: u\n  };\n  new Vue({\n    el: '#c-container-list',\n    data: function data() {\n      return {\n        fileUpdata: ( true ? parent.all.json._j.URLS.Development_Files_ : undefined) + 'picture_file_upload',\n        fileUpdataExc: ( true ? parent.all.json._j.URLS.Development_Server_ : undefined) + 'import_machine_instance_by_excel',\n        fileUpdataExcData: {\n          Authorization: JSON.parse(sessionStorage.getItem('token')).asset.secret\n        },\n        loading: false,\n        testAdmin: ym.init.COMPILESTR.decrypt(JSON.parse(sessionStorage.getItem('_a'))._i) == \"yuanmenghhx\" || ym.init.COMPILESTR.decrypt(JSON.parse(sessionStorage.getItem('_a'))._i) == \"yuanmengKSX\" ? false : true,\n        //指定的账号不能显示订单查看\n        more: false,\n        tableData: [],\n        UnFormData: [],\n        UnTableFormData: [],\n        currentPage: 1,\n        pageSize: 20,\n        page: 1,\n        total: 0,\n        machineId: [],\n        addressId: [],\n        roleId: [],\n        formData: {\n          machineId: [],\n          addressId: []\n        },\n        options: [],\n        option: [],\n        SearchTableAndVisible: false,\n        UpdateTableAndVisible: false,\n        detailTableAndVisible: false,\n        TableAndVisible: false,\n        dialogVisible: false,\n        adoptModule: false,\n        errorExe: false,\n        pawstate: false,\n        dialogImageUrl: '',\n        fileList: [],\n        data: {},\n        num: 1,\n        listSearch: {},\n        //新的列表查询对象\n        SearchTableFormData: {\n          realName: '',\n          workCount: '',\n          auditCount: '',\n          indexCount: '',\n          income: '',\n          loginTime: '',\n          loginIp: '',\n          registerIp: '',\n          classifyName: '',\n          //零件\n          parentId: '',\n          parentName: '',\n          sort: '',\n          level: '',\n          remark: '',\n          id: ''\n        },\n        imageList: {\n          machinePic: []\n        },\n        fileData: {},\n        errorImage: ['../images/error.png'],\n        pickerOptions: {\n          //时间节点\n          shortcuts: [{\n            text: '最近一周',\n            onClick: function onClick(picker) {\n              var end = new Date();\n              var start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n              picker.$emit('pick', [start, end]);\n            }\n          }, {\n            text: '最近一个月',\n            onClick: function onClick(picker) {\n              var end = new Date();\n              var start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n              picker.$emit('pick', [start, end]);\n            }\n          }, {\n            text: '最近三个月',\n            onClick: function onClick(picker) {\n              var end = new Date();\n              var start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n              picker.$emit('pick', [start, end]);\n            }\n          }, {\n            text: '最近半年',\n            onClick: function onClick(picker) {\n              var end = new Date();\n              var start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 180);\n              picker.$emit('pick', [start, end]);\n            }\n          }, {\n            text: '最近一年',\n            onClick: function onClick(picker) {\n              var end = new Date();\n              var start = new Date();\n              start.setTime(start.getTime() - 3600 * 1000 * 24 * 365);\n              picker.$emit('pick', [start, end]);\n            }\n          }]\n        },\n        select_user: '',\n        //用户列表的批量操作\n        user_type: 1,\n        //用户类型\n        statues: {\n          user: false,\n          flow: false,\n          state: false,\n          ount: false\n        },\n        // 状态的显示/f\n        overdueTime: '',\n        grantCount: '',\n        ount: '',\n        //赠送抽奖次数\n        user_state: 1,\n        order: {},\n        refundMoney: {},\n        //订单退款\n        pathUrlExe: {},\n        //导出\n        optionsTime: [],\n        //时间选择\n        bool: '',\n        StatusName: new Map([['free', {\n          user: new Map([[1, '超级管理员'], [2, '系统管理员'], [3, '商户管理员']]),\n          statues: new Map([[0, '冻结'], [1, '正常']]),\n          machineType: new Map([[1, '大型柜式机'], [2, '小型桌面机'], [3, '无网单机']])\n        }], ['time', {\n          machineRun: new Map([[1, '正常'], [2, '故障'], [3, '离线'], [4, '维护'], [5, '维修'], [6, '维修完成']]),\n          couponTime: new Map([[1, '年'], [2, '月'], [3, '日'], [4, '周'], [5, '小时']])\n        }]]),\n        miniTurnableMore: true,\n        //小程序大转盘添加按钮是否显示\n        appointmentPay: {},\n        //预约详情\n        objectId: '',\n        //开通会员的查询 会员id\n        objectIds: [],\n        //开通会员的查询 会员id\n        pageparams: {},\n        // 预存的页面搜索参数\n        countPages: 1 // 无限滚动的 page\n\n      };\n    },\n    created: function created() {\n      this.list();\n      window.is = this;\n    },\n    methods: (_methods = {\n      IError: function IError(err) {\n        var _this = this;\n\n        setTimeout(function () {\n          _this.loading = false;\n\n          if (err == \"\\u672A\\u767B\\u5F55\\u6216\\u8EAB\\u4EFD\\u9A8C\\u8BC1\\u8FC7\\u65F6\") {\n            // window.top.location.href = `../login.htm?hash:[]`;\n            parent.location.href = \"../login.htm?hash:[nK6t7a]\";\n          }\n        }, 1000);\n        this.$message.error('事务提醒：' + err);\n      },\n      ISuccessfull: function ISuccessfull(e) {\n        var _this2 = this;\n\n        setTimeout(function () {\n          _this2.loading = false;\n        }, 1000);\n        this.$message({\n          message: '事务提醒：,' + e,\n          type: 'success'\n        });\n      },\n      handleSizeChange: function handleSizeChange(e) {\n        this.pageSize = e;\n        this.list(this.pageparams ? this.pageparams : null, true);\n      },\n      handleCurrentChange: function handleCurrentChange(e) {\n        this.page = e;\n        this.list(this.pageparams ? this.pageparams : null, true);\n      },\n      list: function list() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var bool = arguments.length > 1 ? arguments[1] : undefined;\n        var _data_ = {},\n            it = this,\n            xml = [];\n\n        if (params) {\n          it.pageparams = params; //保存搜索条件\n\n          params._name_ ? params[params._name_] = params._value_ : null;\n        }\n\n        it.loading = true;\n        params['page'] = !bool ? function () {\n          it.currentPage = 1;\n          return it.currentPage;\n        }() : it.page;\n        params['pageSize'] = 20;\n        _data_ = qs.stringify(params);\n        axios.post(uri, _data_).then(function (params) {\n          var xml = [],\n              data = params.data; // data.page.pages ? it.currentPage= parseInt(data.page.pages) : null;\n\n          if (data.state == 200) {\n            if (uri == 'page_permission_tree') {\n              data.list.forEach(function (element, index) {\n                if (element.lowers) {\n                  element['hasChildren'] = true;\n                  element['children'] = element.lowers;\n                }\n\n                xml.push(element);\n              });\n            } else {\n              data.page.total ? it.total = parseInt(data.page.total) : null;\n              xml = data.page.records;\n            }\n          } else {\n            is.IError(data.msg);\n            is.loading = false;\n          }\n\n          it.tableData = xml;\n          setTimeout(function () {\n            it.loading = false;\n          }, 1000);\n        });\n      },\n      crud: function crud(arg) {\n        window.parent.document.getElementById('tagHref').setAttribute('src', \"../\".concat(arg.uri, \".html?[hash]\").concat(arg.enitId ? '*' + encodeURI(JSON.stringify(arg.enitId)) : '')); // 编辑带参数\n      },\n      loadTree: function loadTree(tree, treeNode, resolve) {\n        //树结构表格\n        setTimeout(function () {\n          resolve(tree.children);\n        }, 500);\n      },\n      //新增 权限\n      assets: function assets(params) {\n        is.loading = true;\n        params.parentId ? params.parentId : params['parentId'] = -1;\n        params.permissionWeight == 1 ? params.requestUri = -1 : null;\n        axios.post('create_permission', qs.stringify(params)).then(function (params) {\n          is.data = params.data;\n\n          if (is.data.state == 200) {\n            is.ISuccessfull(is.data.msg);\n            is.list();\n            is.UpdateTableAndVisible = false;\n          } else {\n            is.IError(is.data.msg);\n          }\n\n          setTimeout(function () {\n            is.loading = false;\n          }, 1000);\n        })[\"catch\"](function (error) {\n          is.IError(error);\n        });\n      },\n      //查看 角色已赋予 权限\n      serchAssetes: function serchAssetes(params) {\n        axios.post('role_page_permission', qs.stringify({\n          roleId: params\n        })).then(function (res) {\n          if (res.data.state == 200) {\n            is.detailTableAndVisible = true;\n            is.UnFormData = res.data.list;\n          } else {\n            is.IError(res.data.msg);\n          }\n        })[\"catch\"](function (error) {\n          is.IError(error);\n        });\n      },\n      //查看 所有 权限 树结构\n      serchAssetesAll: function serchAssetesAll(params) {\n        axios.post('page_permission_tree').then(function (res) {\n          if (res.data.state == 200) {\n            is.TableAndVisible = true;\n            is.UnTableFormData = res.data.list;\n            res.data.list.forEach(function (element, index) {\n              params.forEach(function (els) {\n                if (els.permissionId == element.permissionId) {\n                  it.$nextTick(function () {\n                    is.tableChecked(index); //每次更新了数据，触发这个函数即可。\n                  });\n                }\n              });\n            });\n          } else {\n            is.IError(res.data.msg);\n          }\n        })[\"catch\"](function (error) {\n          is.IError(error);\n        });\n      },\n      //提交绑定\n      bindingAction: function bindingAction(params) {\n        axios.get('set_permission_role', {\n          params: {\n            permissionId: params.permissionId,\n            roleId: params.adminId\n          }\n        }).then(function (params) {\n          is.data = params.data;\n\n          if (is.data.state == 200) {\n            is.ISuccessfull(is.data.msg);\n            is.detailTableAndVisible = false;\n          } else {\n            is.IError(is.data.msg);\n          }\n        })[\"catch\"](function (error) {\n          is.IError(error);\n        });\n      },\n      handleSelectionChange: function handleSelectionChange(val) {\n        var _this3 = this;\n\n        //下拉选项\n        this.multipleSelection = val;\n        this.productCount = val.length;\n        if (uri == 'manage_prodcut_list_list') return false; //阻止继续渲染清单的操作\n\n        this.productId = [];\n        this.adIds = [];\n        this.machineNumber = [];\n        this.adminIds = [];\n        this.userMode = [];\n        val.forEach(function (e) {\n          _this3.productId.push(e.productId || []);\n\n          _this3.machineNumber.push(e.machineNumber || []); //机器编号数组\n\n\n          _this3.adminIds.push(e.adminId || []);\n\n          _this3.adIds.push(e.madId || []);\n\n          e.userId != \"无\" ? _this3.userIdts.push(e.userId) : null;\n\n          _this3.userMode.push(e || []); //批量操作用户类型\n\n        });\n      },\n      tableChecked: function tableChecked(e) {\n        //表格打勾已选择回显 \n        this.$refs.multipleTable.toggleRowSelection(this.tableData[e], true);\n      },\n      //查看客户详细\n      customerDest: function customerDest(params) {\n        axios.get('machine_client_detail', {\n          params: {\n            clientId: params\n          }\n        }).then(function (res) {\n          if (res.data.state == 200) {\n            is.SearchTableAndVisible = true;\n            is.SearchTableFormData = res.data;\n          } else {\n            is.IError(res.data.msg);\n          }\n        })[\"catch\"](function (error) {\n          is.IError(error);\n        });\n      },\n      //新增 实例 设备\n      machine: function machine(params) {\n        // document.querySelectorAll('#machine>div>div>div>input').forEach((element, index) => {\n        //     console.log(element);\n        // })\n        try {\n          params['addressId'] = params.addressId[0];\n          params['machineId'] = params.machineId[0];\n          params['exWarehouseTime'] = ym.init.getDateTime(params.exWarehouseTime).split(' ')[0];\n          axios.post('create_machine_instance', qs.stringify(params)).then(function (res) {\n            if (res.data.state == 200) {\n              is.UpdateTableAndVisible = false;\n              is.ISuccessfull(res.data.msg);\n              is.data = {};\n              is.list();\n            } else {\n              is.IError(res.data.msg);\n            }\n          })[\"catch\"](function (error) {\n            is.IError(error);\n          });\n        } catch (error) {\n          is.IError(error);\n        }\n      },\n      //新增设备 \n      devicemachine: function devicemachine(params) {\n        params['machinePic'] = is.data.machinePic;\n        axios.post('create_machine', qs.stringify(params)).then(function (res) {\n          if (res.data.state == 200) {\n            is.UpdateTableAndVisible = false;\n            is.ISuccessfull(res.data.msg);\n            is.data = {};\n            is.list();\n          } else {\n            is.IError(res.data.msg);\n          }\n        })[\"catch\"](function (error) {\n          is.IError(error);\n        });\n      },\n      //查看实例设备详细\n      machineDest: function machineDest(params) {\n        var timer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        axios.get('sys_machine_instance_detail', {\n          params: {\n            machineInstanceId: params\n          }\n        }).then(function (res) {\n          if (res.data.state == 200) {\n            is.SearchTableAndVisible = true;\n\n            if (res.data.data.status == 1) {\n              is.adoptModule = true;\n            } else {\n              is.adoptModule = false;\n            } // Object.keys(res.data.data).forEach((element, index))\n\n\n            is.SearchTableFormData = res.data.data;\n            timer = setTimeout(function () {\n              document.getElementById('adopt').style.display = 'none';\n\n              if (res.data.data.auditStatus == 2) {\n                document.getElementById('adopt-error').style.display = 'block';\n              } else {\n                document.getElementById('adopt-error').style.display = 'none';\n\n                if (res.data.data.status == 1) {\n                  document.getElementById('adopt').style.display = 'block';\n                }\n              }\n\n              timer = null;\n            }, 0);\n          } else {\n            is.IError(res.data.msg);\n          }\n        })[\"catch\"](function (error) {\n          is.IError(error);\n        });\n      },\n      //查看设备详细\n      devicemachineDest: function devicemachineDest(params) {\n        axios.get('sys_machine_detail', {\n          params: {\n            machineId: params\n          }\n        }).then(function (res) {\n          if (res.data.state == 200) {\n            is.SearchTableAndVisible = true;\n            is.SearchTableFormData = res.data.data;\n          } else {\n            is.IError(res.data.msg);\n          }\n        })[\"catch\"](function (error) {\n          is.IError(error);\n        });\n      },\n      //审核 工单\n      adopt: function adopt(params, bool) {\n        axios.get('audit_machine_instance', {\n          params: {\n            auditResult: +bool + 1,\n            machineInstanceId: params.machineInstanceId\n          }\n        }).then(function (res) {\n          if (res.data.state == 200) {\n            is.SearchTableAndVisible = false;\n            is.ISuccessfull(res.data.msg);\n            is.list();\n          } else {\n            is.IError(res.data.msg);\n          }\n        })[\"catch\"](function (error) {\n          is.IError(error);\n        });\n      },\n      //上传EX\n      ExecSceneSuccess: function ExecSceneSuccess(file) {\n        if (file.state == 200) {\n          this.data['Execfile'] = file.data.failFilePath;\n\n          if (file.data.fail > 0) {\n            is.errorExe = true;\n            is.fileList = [];\n            is.$nextTick(function () {\n              document.getElementById('ahrefDownload').onclick = function () {\n                parent.window.open(file.data.failFilePath, '_blank');\n              };\n            });\n            return false;\n          }\n\n          this.ISuccessfull('上传成功！');\n          this.list();\n        } else {\n          is.IError(file.msg);\n        }\n      },\n      exeLength: function exeLength(error) {\n        is.IError('文件上传超出处理限制个数');\n      },\n      DeleteInstance: function DeleteInstance() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        params[Object.keys(params)[1]] = Object.values(params)[1];\n        axios.get(params.url, {\n          params: params\n        }).then(function (res) {\n          if (res.data.state == 200) {\n            is.ISuccessfull(res.data.msg);\n            is.list();\n          } else {\n            is.IError(res.data.msg);\n          }\n        })[\"catch\"](function (error) {\n          is.IError(error);\n        });\n      },\n      // 查询 物料编号/区域地址ID/角色ID\n      search: function search(params) {\n        var _this4 = this;\n\n        this.data['page'] = 1;\n        this.data['pageSize'] = 10000;\n        this.data['url'] = params.url;\n        axios.post(this.data.url, qs.stringify(this.data)).then(function (params) {\n          if (params.data.state == 200) {\n            if (_this4.data.url == 'sys_machine_list') {\n              _this4.machineId = params.data.page.records.map(function (item) {\n                return {\n                  value: \"\".concat(item.machineId),\n                  label: \"\".concat(item.coding)\n                };\n              });\n            } else if (_this4.data.url == 'sys_role_list') {\n              _this4.roleId = params.data.page.records.map(function (item) {\n                return {\n                  value: \"\".concat(item.roleId),\n                  label: \"\".concat(item.roleName)\n                };\n              });\n            }\n\n            axios.post('sys_address_list', qs.stringify(_this4.data)).then(function (params) {\n              if (params.data.state == 200) {\n                _this4.addressId = params.data.page.records.map(function (item) {\n                  return {\n                    value: \"\".concat(item.id),\n                    label: \"\".concat(item.address)\n                  };\n                });\n              } else {\n                is.IError(params.data.msg);\n              }\n            }); // this.data = {};\n          } else {\n            is.IError(params.data.msg);\n          }\n        })[\"catch\"](function (error) {\n          is.IError(error);\n        });\n      },\n      // select 检索\n      remoteMethod: function remoteMethod(query) {\n        var _this5 = this;\n\n        if (query !== '') {\n          setTimeout(function () {\n            _this5.options = _this5.machineId.filter(function (item) {\n              return item.label.toLowerCase().indexOf(query.toLowerCase()) > -1;\n            });\n          }, 200);\n        } else {\n          this.options = [];\n        }\n      },\n      //选择区域地址ID\n      remoteMethods: function remoteMethods(query) {\n        var _this6 = this;\n\n        if (query !== '') {\n          setTimeout(function () {\n            _this6.option = _this6.addressId.filter(function (item) {\n              return item.label.toLowerCase().indexOf(query.toLowerCase()) > -1;\n            });\n          }, 200);\n        } else {\n          this.option = [];\n        }\n      },\n      //选择角色ID\n      remoteMethodes: function remoteMethodes(query) {\n        var _this7 = this;\n\n        if (query !== '') {\n          setTimeout(function () {\n            _this7.options = _this7.roleId.filter(function (item) {\n              return item.label.toLowerCase().indexOf(query.toLowerCase()) > -1;\n            });\n          }, 200);\n        } else {\n          this.options = [];\n        }\n      },\n      //管理员详情\n      admindetail: function admindetail(params) {\n        var _this8 = this;\n\n        axios.get('sys_admin_detail', {\n          params: params\n        }).then(function (res) {\n          if (res.data.state == 200) {\n            _this8.UpdateTableAndVisible = true;\n\n            _this8.search({\n              url: 'sys_role_list'\n            });\n\n            _this8.data['addressId'] = res.data.data.addressId; //缓存起来 地址ID\n\n            res.data.data.addressId = res.data.data.address;\n            _this8.data['roleId'] = res.data.data.roleId; //缓存起来 地址ID\n\n            res.data.data.roleId = res.data.data.roleName;\n            _this8.formData = res.data.data;\n          } else {\n            is.IError(res.data.msg);\n          }\n        })[\"catch\"](function (error) {\n          is.IError(error);\n        });\n      },\n      //管理员修改\n      admindenit: function admindenit(params) {\n        console.log(this.data);\n        console.log(params); // axios.post('update_admin', qs.stringify(params)).then(params => {\n        //     if (params.data.state == 200) {\n        //     } else {\n        //         is.IError(params.data.msg);\n        //     }\n        // })\n        //     .catch(function (error) {\n        //         is.IError(error);\n        //     })\n      },\n      filterTag: function filterTag(value, row) {\n        return row.machineType === value;\n      }\n    }, _defineProperty(_methods, \"tableChecked\", function tableChecked(e) {\n      this.$refs.multipleTable.toggleRowSelection(this.UpdateTableFormData[e], true);\n    }), _defineProperty(_methods, \"searchAPIs\", function searchAPIs(_v) {\n      var _this9 = this;\n\n      //查找API\n      var it = this;\n\n      switch (_v._uri) {\n        case 'manage_machine_product_relation':\n          //清单的绑定解绑\n          if (_v._type == 4) {\n            //针对料仓配置绑定的机器查询\n            _data['adminId'] = _v._id;\n            delete _data['page'];\n            delete _data['listId'];\n            delete _data['type'];\n            delete _data['machineNumber'];\n            ym.init.XML({\n              method: 'GET',\n              uri: token._j.URLS.Development_Server_ + 'find_admin_machine',\n              //查询绑定关系\n              async: false,\n              xmldata: _data,\n              done: function done(res) {\n                it.UnFormData = [];\n                res.data.forEach(function (_params_) {\n                  it.UnFormData.push({\n                    machineNumber: _params_.machineNumber,\n                    listName: _params_.listName,\n                    machineType: it.StatusName.get('free').machineType.get(_params_.machineType)\n                  });\n                });\n              }\n            });\n            return false;\n          }\n\n          _v._type.forEach(function (e) {\n            if (e == 6) e = 4; //暂时解决产品清单绑定问题\n\n            _data['type'] = e;\n            _data['adminId'] = _v._id || '';\n            _data['listId'] = _v._listid || '';\n            _data['machineNumber'] = _this9.machineNumber || [];\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + _v._uri,\n              async: false,\n              xmldata: _data,\n              done: function done(res) {\n                try {\n                  ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                    console.log(res);\n\n                    switch (e) {\n                      case 1:\n                        it.listIds = [];\n                        res.productListList.forEach(function (data) {\n                          it.listIds.push({\n                            value: data.listId,\n                            label: data.listName\n                          });\n                        });\n                        break;\n\n                      case 2:\n                        it.adminIds = [];\n                        res.userList.forEach(function (data) {\n                          it.adminIds.push({\n                            value: data.adminId,\n                            label: data.adminName\n                          });\n                        });\n                        break;\n\n                      case 3:\n                        it.UnFormData = [];\n\n                        for (var i = 0; i < res.machineNumberList.length; i++) {\n                          it.UnFormData.push({\n                            listId: res.machineNumberList[i].listId,\n                            listName: res.machineNumberList[i].listName,\n                            machineNumber: res.machineNumberList[i].machineNumber,\n                            machineType: res.machineNumberList[i].machineType\n                          });\n                        }\n\n                        break;\n\n                      default:\n                        it.ISuccessfull(res.statusCode.msg);\n                        it.detailTableAndVisible = false;\n                        break;\n                    }\n                  }() : function () {\n                    throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                  }();\n                } catch (error) {\n                  it.IError(error);\n                }\n              }\n            });\n          });\n\n          break;\n\n        case 'get_machine_number_arr':\n          //绑定推送/解绑 \n          _data['name'] = ''; //处理name 缓存\n\n          this.userIds = []; //处理name 缓存\n\n          ym.init.XML({\n            method: 'POST',\n            uri: token._j.URLS.Development_Server_ + _v._uri,\n            async: false,\n            xmldata: _data,\n            done: function done(res) {\n              res.list.forEach(function (e) {\n                _data['machineNumber'] = e;\n                ym.init.XML({\n                  method: 'GET',\n                  uri: token._j.URLS.Development_Server_ + 'statistics_user_list',\n                  //查询绑定关系\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    var uname = \"无\",\n                        uid = \"无\";\n                    res.statusCode.status != '4444' ? res.userList.forEach(function (arr) {\n                      uname = arr.nickName;\n                      uid = arr.userId;\n                    }) : null;\n                    it.UnFormData.push({\n                      machineNumber: e,\n                      userName: uname,\n                      userId: uid\n                    });\n                  }\n                });\n              });\n            }\n          });\n          break;\n\n        case 'manage_advertisement_list_relation':\n          //广告视频清单\n          _v._type.forEach(function (e) {\n            _data['type'] = e;\n            _data['adminId'] = it.adminIds || [];\n            _data['listId'] = _v._listid || '';\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + _v._uri,\n              async: false,\n              xmldata: _data,\n              done: function done(res) {\n                try {\n                  ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                    switch (e) {\n                      case 1:\n                        it.listIds = [];\n                        res.advertisementListList.forEach(function (data) {\n                          it.listIds.push({\n                            value: data.listId,\n                            label: data.listName\n                          });\n                        });\n                        break;\n\n                      case 2:\n                        it.UnFormData = [];\n                        res.userList.forEach(function (data) {\n                          it.UnFormData.push({\n                            adminId: data.adminId,\n                            adListId: data.adListId,\n                            listName: data.listName,\n                            adminName: data.adminName\n                          });\n                        });\n                        break;\n\n                      default:\n                        it.ISuccessfull(res.statusCode.msg);\n                        it.detailTableAndVisible = false;\n                        break;\n                    }\n                  }() : function () {\n                    throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                  }();\n                } catch (error) {\n                  it.IError(error);\n                }\n              }\n            });\n          });\n\n          break;\n\n        case 'find_user_milliliter_log':\n          //用户列表的毫升数日志\n          delete _data['type'];\n          _data['userId'] = _v._id;\n          _data['page'] = 1;\n          _data['start'] = '';\n          _data['end'] = '';\n          ym.init.XML({\n            method: 'GET',\n            uri: token._j.URLS.Development_Server_ + 'find_user_milliliter_log',\n            //查询绑定关系\n            async: false,\n            xmldata: _data,\n            done: function done(res) {\n              if (res.statusCode.status != 6666) return false;\n              res.logList.forEach(function (e) {\n                it.TableFormData.push({\n                  logId: e.logId,\n                  userId: e.userId,\n                  userName: e.userName,\n                  createTime: e.createTime,\n                  milliliterChange: e.milliliterChange,\n                  stateComment: e.stateComment\n                });\n              });\n            }\n          });\n          break;\n\n        case 'find_user_couponList':\n          //用户列表的毫升数日志\n          _data['userId'] = _v._id;\n          _data['page'] = 1;\n          ym.init.XML({\n            method: 'POST',\n            uri: token._j.URLS.Development_Server_ + 'find_user_couponList',\n            //查询绑定关系\n            async: false,\n            xmldata: _data,\n            done: function done(res) {\n              res.logList.forEach(function (e) {\n                it.TableFormData.push({\n                  logId: e.logId,\n                  userId: e.userId,\n                  userName: e.userName,\n                  createTime: e.createTime,\n                  milliliterChange: e.milliliterChange,\n                  stateComment: e.stateComment\n                });\n              });\n            }\n          });\n          break;\n\n        default:\n          break;\n      }\n    }), _defineProperty(_methods, \"querySearchAsync\", function querySearchAsync(queryString, cb) {\n      //动态查询用户\n      var it = this;\n      _data['type'] = 1;\n      _data['name'] = queryString || '拉';\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + 'find_user_for_bind',\n        //查询绑定关系\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          var _arr = [];\n          res.list ? res.list.forEach(function (e) {\n            _arr.push({\n              value: e.nickName,\n              _id: e.userId\n            });\n          }) : it.IError(res.statusCode.msg);\n          it.UnFormData = res.list; //用户批量操作\n\n          var results = queryString ? _arr.filter(it.createStateFilter(queryString)) : _arr;\n          clearTimeout(it.timeout);\n          it.timeout = setTimeout(function () {\n            cb(results);\n          }, 3000 * Math.random());\n        }\n      });\n    }), _defineProperty(_methods, \"createStateFilter\", function createStateFilter(queryString) {\n      return function (state) {\n        return state.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0;\n      };\n    }), _defineProperty(_methods, \"handleSelect\", function handleSelect(item) {\n      //取得选择的用户ID\n      this.userIds = item._id; //this.UserTableData.push(item); //用户批量操作\n    }), _defineProperty(_methods, \"bindUser\", function bindUser(e) {\n      //执行绑定/解绑\n      var it = this;\n\n      switch (e._uri) {\n        case 'client_user_list':\n          e._session != '' ? null : it.IError('缺少参数！');\n\n          var _sess = JSON.parse(e._session);\n\n          switch (_sess._uri) {\n            case 'manage_client_user':\n              _data['userType'] = it.user_type; //用户类型\n\n              _data['type'] = _sess._type; //用户\n\n              it.userMode.forEach(function (_evnt) {\n                _data['userId'] = _evnt.userId;\n                _data['nickName'] = _evnt.nickName;\n                ym.init.XML({\n                  method: 'POST',\n                  uri: token._j.URLS.Development_Server_ + _sess._uri,\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    it.detailTableAndVisible = false;\n                    it.ISuccessfull(res.statusCode.msg);\n                  }\n                });\n              });\n              delete _data['userType'];\n              delete _data['userId'];\n              delete _data['nickName'];\n              it.list(); //刷新列表\n\n              break;\n\n            case 'grant_compensate_milliliter':\n              //补偿流量\n              //grant_compensate_milliliter\n              _data['grantCount'] = it.grantCount;\n              _data['overdueTime'] = it.overdueTime;\n              _data['type'] = _sess._type; //用户\n\n              it.userMode.forEach(function (_evnt) {\n                _data['userId'] = _evnt.userId;\n                _data['nickName'] = _evnt.nickName;\n                ym.init.XML({\n                  method: 'GET',\n                  uri: token._j.URLS.Development_Server_ + _sess._uri,\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    it.detailTableAndVisible = false;\n                    it.ISuccessfull(res.statusCode.msg);\n                  }\n                });\n              });\n              delete _data['grantCount'];\n              delete _data['overdueTime'];\n              it.list(); //刷新列表\n\n              break;\n\n            case 'grant_sys_user_draw_chance':\n              //小程序大转盘 赠送抽奖次数\n              _data['grantCount'] = it.ount;\n              it.userMode.forEach(function (_evnt) {\n                _data['userId'] = _evnt.userId;\n                ym.init.XML({\n                  method: 'GET',\n                  uri: token._j.URLS.Development_Server_ + _sess._uri,\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    it.detailTableAndVisible = false;\n                    it.ISuccessfull(res.statusCode.msg);\n                  }\n                });\n              });\n              delete _data['grantCount'];\n              delete _data['name'];\n              delete _data['userId'];\n              it.list(); //刷新列表\n\n              break;\n\n            case 'dredge_member':\n              //后台开通会员\n              _data['memberRuleId'] = it.objectId;\n              it.userMode.forEach(function (_evnt) {\n                _data['userId'] = _evnt.userId;\n                ym.init.XML({\n                  method: 'GET',\n                  uri: token._j.URLS.Development_Server_ + _sess._uri,\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    it.detailTableAndVisible = false;\n                    it.ISuccessfull(res.statusCode.msg);\n                  }\n                });\n              });\n              delete _data['memberRuleId'];\n              delete _data['userId'];\n              it.list(); //刷新列表\n\n              break;\n\n            default:\n              //赠送抽奖次数 （1.0版本赠送）\n              _data['grantCount'] = it.ount;\n              it.userMode.forEach(function (_evnt) {\n                _data['userId'] = _evnt.userId;\n                ym.init.XML({\n                  method: 'POST',\n                  uri: token._j.URLS.Development_Server_ + _sess._uri,\n                  async: false,\n                  xmldata: _data,\n                  done: function done(res) {\n                    it.detailTableAndVisible = false;\n                    it.ISuccessfull(res.statusCode.msg);\n                  }\n                });\n              });\n              delete _data['grantCount'];\n              break;\n          }\n\n          break;\n\n        case 'batch_free_user':\n          _data['type'] = 2;\n          ym.init.XML({\n            method: 'POST',\n            uri: token._j.URLS.Development_Server_ + 'batch_free_user',\n            async: false,\n            xmldata: _data,\n            done: function done(res) {\n              it.detailTableAndVisible = false;\n              it.ISuccessfull(res.statusCode.msg);\n            }\n          });\n          break;\n\n        default:\n          _data['machineNumber'] = this.machineNumber;\n          _data['type'] = e._type;\n          _data['userIds'] = e._id ? this.userIdts : this.userIds;\n          ym.init.XML({\n            method: 'GET',\n            uri: token._j.URLS.Development_Server_ + e._uri,\n            async: false,\n            xmldata: _data,\n            done: function done(res) {\n              it.detailTableAndVisible = false;\n              it.ISuccessfull(res.statusCode.msg);\n            }\n          });\n          break;\n      }\n    }), _defineProperty(_methods, \"machineLog\", function machineLog(e) {\n      var it = this;\n      delete _data['page'];\n      _data['type'] = 5;\n      _data['machineNumber'] = e.enitId.machineNumber;\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + 'manage_machine',\n        async: true,\n        xmldata: _data,\n        done: function done(res) {\n          res.machineFaultList.forEach(function (arr) {\n            it.machineLogs.push({\n              i: ym.init.getDateTime(arr.faultTime),\n              t: arr.faultContent\n            });\n          });\n        }\n      });\n    }), _defineProperty(_methods, \"fileChange\", function fileChange(e) {\n      //上传结构\n      _data['type'] = 4;\n      _data['mUpdateVersion'] = this.formData.mUpdateVersion;\n    }), _defineProperty(_methods, \"filemadUrlChange\", function filemadUrlChange(e) {\n      _data['type'] = 9;\n    }), _defineProperty(_methods, \"fileExceed\", function fileExceed() {\n      this.IError('只允许单个上传');\n    }), _defineProperty(_methods, \"machineSceneSuccess\", function machineSceneSuccess(e) {\n      is.data['machinePic'] = e.data.path;\n    }), _defineProperty(_methods, \"handleRemove\", function handleRemove(file, fileList) {\n      console.log(file, fileList);\n    }), _defineProperty(_methods, \"handlePictureCardPreview\", function handlePictureCardPreview(file) {\n      //点击查看放大的时候\n      this.dialogVisible = true;\n      this.dialogImageUrl = file.url;\n    }), _defineProperty(_methods, \"machineVersion\", function machineVersion(_idata) {\n      var it = this;\n      _data['type'] = _idata._type;\n      _data['machineType'] = _idata._machineType;\n      _data['mUpdateVersion'] = _idata._d.mUpdateVersion;\n      _data['versionCode'] = _idata._d.versionCode;\n      _data['mUpdateDes'] = _idata._d.mUpdateDes;\n      _data['mUpdateUrl'] = this.formData.mUpdateUrl;\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + _idata._uri,\n        async: true,\n        xmldata: _data,\n        done: function done(res) {\n          ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n            it.ISuccessfull(res.statusCode.msg);\n            it.detailTableAndVisible = false;\n            it.list();\n          }() : it.IError(res.statusCode.msg);\n        }\n      });\n    }), _defineProperty(_methods, \"deleteData\", function deleteData(_del) {\n      //删除操作\n      var it = this;\n\n      switch (_del._uri) {\n        case \"manage_poi\":\n          _data['poiIds'] = _del._delete.poiId;\n          _data['type'] = _del._type;\n          ym.init.XML({\n            method: 'POST',\n            uri: token._j.URLS.Development_Server_ + _del._uri,\n            async: true,\n            xmldata: _data,\n            done: function done(res) {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.ISuccessfull(res.statusCode.msg);\n                it.list();\n              }() : it.IError(res.statusCode.msg);\n            }\n          });\n          break;\n\n        case 'manage_machine_advertisement':\n          _data['madId'] = _del._parameter;\n          _data['type'] = _del._type;\n          ym.init.XML({\n            method: 'POST',\n            uri: token._j.URLS.Development_Server_ + _del._uri,\n            async: true,\n            xmldata: _data,\n            done: function done(res) {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.ISuccessfull(res.statusCode.msg);\n                it.list();\n              }() : it.IError(res.statusCode.msg);\n            }\n          });\n          break;\n\n        case 'manage_coupon':\n          _data['couponId'] = _del._parameter;\n          _data['type'] = _del._type;\n          ym.init.XML({\n            method: 'POST',\n            uri: token._j.URLS.Development_Server_ + _del._uri,\n            async: true,\n            xmldata: _data,\n            done: function done(res) {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.ISuccessfull(res.statusCode.msg);\n                it.list();\n              }() : it.IError(res.statusCode.msg);\n            }\n          });\n          break;\n\n        default:\n          break;\n      }\n    }), _defineProperty(_methods, \"addEventData\", function addEventData(_event) {\n      //添加视频广告///优惠券赠送\n      var it = this;\n\n      switch (_event._uri) {\n        case 'manage_machine_advertisement':\n          _data['madOrder'] = _event._parameter.madOrder;\n          _data['madTitle'] = _event._parameter.madTitle;\n          _data['madUrl'] = _event._parameter.madUrl;\n          _data['type'] = _event._type;\n\n          if (it.formData.madId) {\n            _data['madId'] = it.formData.madId;\n            _data['type'] = 4;\n          }\n\n          ;\n          ym.init.XML({\n            method: 'POST',\n            uri: token._j.URLS.Development_Server_ + _event._uri,\n            async: true,\n            xmldata: _data,\n            done: function done(res) {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.ISuccessfull(res.statusCode.msg);\n                it.adevtmodel = false;\n                it.list();\n              }() : it.IError(res.statusCode.msg);\n            }\n          });\n          break;\n\n        case 'manage_coupon':\n          //赠送优惠券\n          _data['grantCount'] = _event._parameter;\n          _data['couponId'] = it.unbinadmin.couponId;\n          _data['userId'] = [];\n          it.userMode.forEach(function (e) {\n            _data['userId'].push(e.userId); //用户ID\n\n          });\n          _data['type'] = _event._type;\n          ym.init.XML({\n            method: 'POST',\n            uri: token._j.URLS.Development_Server_ + _event._uri,\n            async: true,\n            xmldata: _data,\n            done: function done(res) {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.ISuccessfull(res.statusCode.msg);\n                it.detailTableAndVisible = false;\n                delete _data['name'];\n                delete _data['grantCount'];\n                delete _data['couponId'];\n                delete _data['userId'];\n                it.list();\n              }() : it.IError(res.statusCode.msg);\n            }\n          });\n          break;\n\n        default:\n          break;\n      }\n    }), _defineProperty(_methods, \"enitEventData\", function enitEventData(_event) {\n      var it = this;\n\n      switch (_event._uri) {\n        case 'manage_machine_advertisement':\n          if (!_event.hasOwnProperty('_status')) {\n            _data['madId'] = _event._parameter;\n            _data['type'] = _event._type;\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + _event._uri,\n              async: true,\n              xmldata: _data,\n              done: function done(res) {\n                ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                  it.imageList.madUrl = []; // 先清空视频地址列表\n\n                  it.ISuccessfull(res.statusCode.msg);\n                  it.formData.madTitle = res.machineAdvertisementInfo.madTitle;\n                  it.formData.madUrl = res.machineAdvertisementInfo.madUrl;\n                  it.formData.madOrder = res.machineAdvertisementInfo.madOrder;\n                  it.formData.madId = res.machineAdvertisementInfo.madId;\n                  it.imageList.madUrl.push({\n                    name: 'madUrl',\n                    url: res.machineAdvertisementInfo.madUrl\n                  });\n                }() : it.IError(res.statusCode.msg);\n              }\n            });\n          } else {\n            //madStatus\n            _data['madId'] = _event._parameter;\n            _data['type'] = _event._type;\n            _data['madStatus'] = +!_event._status;\n            ym.init.XML({\n              method: 'POST',\n              uri: token._j.URLS.Development_Server_ + _event._uri,\n              async: true,\n              xmldata: _data,\n              done: function done(res) {\n                ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                  delete _data['madId'];\n                  delete _data['madStatus'];\n                  it.list();\n                }() : it.IError(res.statusCode.msg);\n              }\n            });\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }), _defineProperty(_methods, \"userSelect\", function userSelect(_event) {\n      //用户批量操作\n      _event = JSON.parse(_event);\n      var it = this;\n\n      switch (_event._uri) {\n        case 'manage_client_user':\n          if (_event._type == 2) {\n            //更改用户类型 \n            it.statues.user = true;\n            it.statues.state = false;\n            it.statues.flow = false;\n            it.statues.ount = false;\n            it.statues.objectId = false;\n          } else {\n            //更改用户状态\n            it.statues.user = false;\n            it.statues.state = true;\n            it.statues.flow = false;\n            it.statues.ount = false;\n            it.statues.objectId = false;\n          }\n\n          break;\n\n        case 'grant_compensate_milliliter':\n          //更改用户毫升数\n          it.statues.user = false;\n          it.statues.state = false;\n          it.statues.flow = true;\n          it.statues.ount = false;\n          it.statues.objectId = false;\n          break;\n\n        case 'dredge_member':\n          //后台开通会员-- 查询会员\n          it.statues.user = false;\n          it.statues.state = false;\n          it.statues.flow = false;\n          it.statues.ount = false;\n          it.statues.objectId = true;\n          ym.init.XML({\n            method: 'POST',\n            uri: token._j.URLS.Development_Server_ + 'get_member_list',\n            async: false,\n            xmldata: _data,\n            done: function done(res) {\n              try {\n                ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                  setTimeout(function () {\n                    it.objectIds = [];\n                    res.memberRuleList.forEach(function (key, index) {\n                      it.objectIds.push({\n                        memberRuleId: key.memberRuleId,\n                        memberRuleName: \"ID\\uFF1A\".concat(key.memberRuleId, \"   \\u540D\\u79F0\\uFF1A\").concat(key.memberRuleName)\n                      });\n                    });\n                  }, 500);\n                }() : function () {\n                  throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n                }();\n              } catch (error) {\n                it.IError(error);\n              }\n            }\n          });\n          break;\n\n        default:\n          //赠送抽奖次数\n          it.statues.user = false;\n          it.statues.state = false;\n          it.statues.ount = true;\n          it.statues.flow = false;\n          it.statues.objectId = false;\n          break;\n      }\n    }), _defineProperty(_methods, \"statusVip\", function statusVip(e) {\n      // 更改会员状态\n      var it = this;\n      _data['memberId'] = e;\n      ym.init.XML({\n        method: 'GET',\n        uri: token._j.URLS.Development_Server_ + 'change_member_status',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.ISuccessfull(res.statusCode.msg);\n              it.list();\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"orderDetail\", function orderDetail(e) {\n      //订单详情\n      var it = this;\n      _data['orderId'] = e;\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + 'order_detail',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.order = {};\n              it.order.orderId = res.detail.orderId;\n              it.order.userId = res.detail.userId;\n              it.order.nickName = res.detail.nickName;\n              it.order.headPicUrl = res.detail.headPicUrl;\n              it.order.machineNumber = res.detail.machineNumber;\n              it.order.machineType = res.detail.machineType;\n              it.order.adminId = res.detail.adminId;\n              it.order.adminName = res.detail.adminName;\n              it.order.paymentType = res.detail.paymentType;\n              it.order.spendingMoney = res.detail.spendingMoney;\n              it.order.paymentMoney = res.detail.paymentMoney;\n              it.order.productId = res.detail.productId;\n              it.order.productName = res.detail.productName;\n              it.order.flavorShow = JSON.stringify(res.detail.flavorShow);\n              it.order.couponName = res.detail.couponName;\n              it.order.consumptionType = res.detail.consumptionType;\n              it.order.orderStatus = res.detail.orderStatus;\n              it.order.redeemCode = res.detail.redeemCode;\n              it.order.paymentTime = res.detail.paymentTime;\n              it.order.createTime = res.detail.createTime;\n              it.order.orderType = res.detail.orderType;\n              it.order.refundId = res.detail.refundId;\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"refundMoneyNum\", function refundMoneyNum(_event) {\n      //order_refund  订单退款\n      var it = this;\n      it.loading = true;\n      _data['orderId'] = _event.orderId;\n      _data['refundLimit'] = parseFloat(_event.payNum * 100).toFixed(0) || 0;\n      _data['milliliterLimit'] = _event.milliliterLimit || '';\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + 'order_refund',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.ISuccessfull(res.statusCode.msg);\n              it.InputAndVisible = false;\n              setTimeout(function () {\n                it.loading = false;\n                it.list();\n              }, 500);\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"exportOrder\", function exportOrder(_event) {\n      // 订单导出 excel\n      var it = this;\n      it.loading = true;\n      _data['name'] = JSON.stringify({\n        machineNumber: _event.machineNumber || '',\n        adminName: _event.adminName || '',\n        productName: _event.productName || '',\n        couponName: _event.couponName || ''\n      });\n      _data['consumptionType'] = _event.consumptionType || '';\n      _data['orderStatus'] = _event.orderStatus || '';\n      _data['startTime'] = it.optionsTime[0] || '';\n      _data['endTime'] = it.optionsTime[1] || '';\n      _data['orderLine'] = _event.orderLine || '';\n      _data['sort'] = _event.sort || '';\n      _data['orderType'] = _event.orderType || '';\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + 'export_order_list',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              setTimeout(function () {\n                it.loading = false;\n              }, 500);\n              location.href = token._j.URLS.Development_Server_ + res.path;\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"exportPushOrder\", function exportPushOrder(_event) {\n      // 资金管理导出 excel\n      var it = this;\n      it.loading = true;\n      _data['orderId'] = _event.consumptionType || '';\n      _data['machineNumber'] = _event.orderStatus || '';\n      _data['startTime'] = it.optionsTime[0] || '';\n      _data['endTime'] = it.optionsTime[1] || '';\n      _data['adminName'] = _event.orderLine || '';\n      _data['userId'] = _event.sort || '';\n      _data['orderType'] = _event.orderType || '';\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + 'export_order_log_list',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              setTimeout(function () {\n                it.loading = false;\n              }, 500);\n              location.href = token._j.URLS.Development_Server_ + res.path;\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"getTime\", function getTime(_event) {\n      //时间区间\n      this.optionsTime[0] = ym.init.getDateTime(_event[0]);\n      this.optionsTime[1] = ym.init.getDateTime(_event[1]);\n    }), _defineProperty(_methods, \"submit\", function submit(_event) {\n      var _type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'POST';\n\n      var it = this;\n\n      if (_event.en == 'pull') {\n        //编辑\n        if (_event.d) {\n          _data['maintainerId'] = _event.d;\n          _type = 'GET';\n        } else {\n          if (_event.unbinadmin.secc) {\n            //执行不同的操作\n            _data['operaType'] = 2;\n            _data['operaVal'] = _event.unbinadmin.secc;\n          } else if (_event.unbinadmin.bindMachine) {\n            _data['operaType'] = 5;\n            _data['operaVal'] = _event.unbinadmin.bindMachine;\n          } else {\n            _data['operaType'] = 4;\n            _data['operaVal'] = it.userIds;\n          }\n        }\n      } else {\n        //添加\n        _data['maintainerName'] = _event.formData.maintainerName || '';\n        _data['maintainerPhone'] = _event.formData.maintainerPhone || '';\n        _data['password'] = _event.formData.password || '';\n        _data['userId'] = it.userIds;\n      }\n\n      ym.init.XML({\n        method: _type,\n        uri: token._j.URLS.Development_Server_ + _event.uri,\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              if (_event.en == 'pull' && _event.d) {\n                it.unbinadmin.maintainerName = res.maintainer.maintainerName;\n                it.unbinadmin.maintainerPhone = res.maintainer.maintainerPhone; // it.unbinadmin.secc = res.maintainer.maintainerStatus;\n\n                it.unbinadmin.bindMachine = res.maintainer.bindMachine == -1 ? '' : res.maintainer.bindMachine;\n                it.unbinadmin.state = res.maintainer.nickName != '无' ? res.maintainer.nickName : '';\n                it.userIds = res.maintainer.userId;\n              } else {\n                it.ISuccessfull(res.statusCode.msg);\n                delete _data['name'];\n                setTimeout(function () {\n                  it.TableAndVisible = false;\n                  it.detailTableAndVisible = false;\n                  it.loading = false;\n                }, 500);\n                it.list();\n              }\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"adminSubmit\", function adminSubmit(_event) {\n      //超级管理员\n      var it = this;\n\n      if (_event.en == \"pull\") {\n        _data['type'] = 1;\n        _data['toAdminId'] = _event._d;\n      } else {\n        _data['type'] = 5;\n\n        if (it.bool != '') {\n          delete _data['toAdminId'];\n          delete _data['page'];\n          _data['adminToken'] = it.bool.adminToken;\n          _data['type'] = 6;\n          _data['registerTime'] = it.bool.registerTime;\n          _data['manageId'] = it.bool.manageId;\n          _data['adminStatus'] = it.bool.adminStatus;\n          _data['adminId'] = it.bool.adminId;\n        }\n\n        ;\n        _data['adminName'] = _event.formData.adminName;\n        _data['adminPwd'] = _event.formData.adminPwd;\n        _data['roleId'] = _event.formData.roleId;\n        _data['realName'] = _event.formData.realName;\n        _data['adminMobile'] = _event.formData.adminMobile;\n        _data['userId'] = it.userIds;\n        _data['named'] = _event.formData.named;\n      }\n\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + _event.uri,\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              if (_event.en == 'pull' && _event._d) {\n                it.formData.adminName = res.adminUser.adminName;\n                it.formData.adminPwd = res.adminUser.adminPwd;\n                it.formData.roleId = res.adminUser.roleId;\n                it.formData.realName = res.adminUser.realName;\n                it.formData.adminMobile = res.adminUser.adminMobile;\n                it.formData.named = res.adminUser.named;\n                it.formData.state = res.adminUser.nickName != '无' ? res.adminUser.nickName : '';\n                it.userIds = res.adminUser.userId != -1 ? res.adminUser.userId : [];\n                it.bool = {\n                  adminToken: res.adminUser.adminToken || '',\n                  registerTime: ym.init.getDateTime(res.adminUser.registerTime) || '',\n                  manageId: res.adminUser.manageId || '',\n                  adminStatus: res.adminUser.adminStatus || '',\n                  adminId: res.adminUser.adminId\n                };\n              } else {\n                it.ISuccessfull(res.statusCode.msg);\n                delete _data['roleId'];\n                delete _data['adminName'];\n                delete _data['adminId'];\n                delete _data['realName'];\n                setTimeout(function () {\n                  it.TableAndVisible = false;\n                  it.detailTableAndVisible = false;\n                  it.loading = false;\n                }, 500);\n                it.list();\n              }\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"showtruntablelogs\", function showtruntablelogs(params) {\n      //转盘记录\n      console.log(params);\n      var it = this;\n      _data['addressId'] = params;\n      ym.init.XML({\n        method: 'GET',\n        uri: token._j.URLS.Development_Server_ + 'user_address_detail',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.UnFormData.push({\n                userId: res.data.userId,\n                named: res.data.named,\n                phone: res.data.phone,\n                province: res.data.province,\n                city: res.data.city,\n                district: res.data.district,\n                address: res.data.address,\n                createTime: res.data.createTime\n              });\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"exportTurntableUserLogs\", function exportTurntableUserLogs(params) {\n      //导出用户抽奖记录\n      var it = this;\n      _data['userId'] = params.userId || '';\n      _data['drawInstanceId'] = params.drawInstanceId || '';\n      _data['drawId'] = params.drawId || '';\n      _data['drawName'] = params.drawName || '';\n      _data['raffleVersion'] = params.raffleVersion || '';\n      _data['itemName'] = params.itemName || '';\n      _data['itemType'] = params.itemType || '';\n      _data['status'] = params.status || '';\n      _data['hasAddress'] = params.hasAddress || '';\n\n      if (params.startTime > 1) {\n        _data['startTime'] = ym.init.getDateTime(params.startTime[0]) || '';\n        _data['endTime'] = ym.init.getDateTime(params.startTime[1]) || '';\n      }\n\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + 'export_user_draw_raffle_log_list',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              location.href = token._j.URLS.Development_Server_ + res.path;\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"machineMaintenance\", function machineMaintenance(params) {\n      var it = this;\n      _data['maintainerId'] = params.maintainerId;\n      _data['maintainFlowId'] = params.maintainFlowLogId;\n      ym.init.XML({\n        method: 'GET',\n        uri: token._j.URLS.Development_Server_ + 'maintain_question_log_list',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.UnFormData = [];\n              res.data.forEach(function (element) {\n                it.UnFormData.push({\n                  question: element.question,\n                  answerPic: element.answerPic,\n                  answer: function () {\n                    var _code = element.answer.split('$')[0],\n                        _code_ = '';\n                    element.answer.split('$')[0].includes('{') ? void function () {\n                      Object.keys(JSON.parse(_code)).forEach(function (element, index) {\n                        if (Object.keys(JSON.parse(_code)).length <= 2) {\n                          _code_ = \"\\u6599\\u4ED3\\uFF1A\".concat(Object.values(JSON.parse(_code))[0], \",\\u574F\\u6599\\uFF1A\").concat(Object.values(JSON.parse(_code))[1]);\n                        } else {\n                          // _code_ += ` 【 料仓：${index + 1}, 数值：${Object.values(JSON.parse(_code))[index]} 】 `;\n                          _code_ += \"\\u3010 \".concat(index + 1, \"\\u3001\").concat(Object.keys(JSON.parse(_code))[index].split('g')[0], \"\\uFF1A\").concat(Object.values(JSON.parse(_code))[index], \" g \\u3011 \");\n                        }\n                      });\n                      _code = _code_;\n                    }() : null;\n                    return _code;\n                  }()\n                });\n              });\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"machineBunkerConfig\", function machineBunkerConfig(params, enitBunkerConf) {\n      var it = this;\n      _data['machineBunkerConfigId'] = params.machineBunkerConfigId;\n      ym.init.XML({\n        method: 'GET',\n        uri: token._j.URLS.Development_Server_ + 'machine_bunker_config',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.TableFormData = [];\n              it.formData.numberBigConf = []; //编辑时的回显\n\n              it.formData.numberSmallConf = []; // 小机器\n\n              it.bunkerConf = {\n                name: res.bunkerConfig.bunkerConfigName,\n                time: ym.init.getDateTime(res.bunkerConfig.createTime)\n              };\n              JSON.parse(res.bunkerConfig.bunkerConfiguration).forEach(function (element) {\n                it.TableFormData.push({\n                  name: element.name,\n                  number: element.number,\n                  isShow: element.isShow == +true ? '是' : '否'\n                });\n\n                if (enitBunkerConf) {\n                  //编辑的时候回显\n                  it.numberConf(res.bunkerConfig.machineType); //重置大小机器的tag\n\n                  it.formData.disableConf = true;\n                  it.formData.disableConfMahineName = res.bunkerConfig.machineType == 2 ? \"小型桌面机\" : \"大型柜式机\";\n                  it.formData.has = res.bunkerConfig.machineBunkerConfigId; //是编辑操作的ID\n\n                  it.formData.bunkerConfigName = res.bunkerConfig.bunkerConfigName; //配置名称\n\n                  it.formData.machineType = res.bunkerConfig.machineType; //设备类型\n\n                  it.formData.isSys = res.bunkerConfig.isSys; //是否系统配置 \n\n                  if (res.bunkerConfig.machineType == 2) {\n                    it.formData.numberSmallConf.push({\n                      name: element.name,\n                      number: element.number,\n                      isShow: element.isShow\n                    });\n                  } else {\n                    it.formData.numberBigConf.push({\n                      name: element.name,\n                      number: element.number,\n                      isShow: element.isShow\n                    });\n                  }\n                }\n              });\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"numberConf\", function numberConf(params) {\n      //切换料仓类型\n      if (params == +true) {\n        this.bunkerConfNumber = true;\n      } else {\n        this.bunkerConfNumber = false;\n      }\n    }), _defineProperty(_methods, \"pushNumberConf\", function pushNumberConf(params) {\n      //提交 料仓配置\n      var it = this;\n      _data['bunkerConfigName'] = params.bunkerConfigName;\n      _data['machineType'] = params.machineType;\n\n      if (params.machineType == +true) {\n        _data['bunkerConfiguration'] = JSON.stringify(params.numberBigConf);\n      } else {\n        _data['bunkerConfiguration'] = JSON.stringify(params.numberSmallConf);\n      }\n\n      _data['isSys'] = params.isSys;\n\n      if (it.formData.has) {\n        _data['machineBunkerConfigId'] = it.formData.has;\n      }\n\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + 'add_or_update_machine_bunker_config',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.InputAndVisible = false;\n              it.ISuccessfull(res.statusCode.msg);\n              delete _data['machineBunkerConfigId'];\n              delete _data['bunkerConfigName'];\n              delete _data['machineType'];\n              delete _data['bunkerConfiguration'];\n              delete _data['isShow'];\n              delete _data['isSys'];\n              it.list();\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"bindMachineBunker\", function bindMachineBunker(params) {\n      //绑定料仓配置\n      var it = this;\n      _data['machineBunkerConfigId'] = it.formData.machineBunkerConfigAllId;\n      _data['machineNumbers'] = it.machineNumber; //数组\n\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + 'bind_machine_bunker',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.detailTableAndVisible = false;\n              it.ISuccessfull(res.statusCode.msg);\n              delete _data['machineBunkerConfigId'];\n              delete _data['machineNumbers'];\n              it.list();\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"miniTurntableUApush\", function miniTurntableUApush(params) {\n      //小程序大转盘新建 /更新提交\n      var it = this;\n      _data['raffleName'] = params.raffleName;\n      _data['allowConsumeChance'] = params.allowConsumeChance;\n      _data['allowMemberConvert'] = params.allowMemberConvert;\n      _data['allowShareChance'] = params.allowShareChance;\n      _data['convertMilliliter'] = params.convertMilliliter || 0;\n      _data['maxLuckyValue'] = params.maxLuckyValue;\n      _data['status'] = params.status;\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + 'add_or_update_sys_draw_raffle_info',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.InputAndVisible = false;\n              it.ISuccessfull(res.statusCode.msg);\n              it.list();\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"miniTurntablePrizeExe\", function miniTurntablePrizeExe(params) {\n      //导出抽奖记录\n      var it = this;\n      this.loading = true;\n      _data['userId'] = params.userId || '';\n      _data['nickName'] = params.nickName || '';\n      _data['adminName'] = params.adminName || '';\n      _data['raffleVersion'] = params.raffleVersion || '';\n      _data['itemType'] = params.itemType || '';\n      _data['status'] = params.status || '';\n      _data['startDate'] = params.startTime ? ym.init.getDateTime(params.startTime[0]).split(' ')[0] : '';\n      _data['endDate'] = params.startTime ? ym.init.getDateTime(params.startTime[1]).split(' ')[0] : '';\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + 'export_sys_user_draw_log_list',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.UpdateTableAndVisible = false;\n              it.ISuccessfull(res.statusCode.msg);\n              location.href = token._j.URLS.Development_Server_ + res.path;\n              it.loading = false;\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.loading = false;\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"maintenanceLogsOutPut\", function maintenanceLogsOutPut(params) {\n      //导出运维日志\n      var it = this;\n      this.loading = true;\n      _data['maintainerId'] = params.maintainerId || '';\n      _data['maintainerName'] = params.maintainerName || '';\n      _data['machineNumber'] = params.machineNumber || '';\n      _data['status'] = params.status || '';\n      _data['startDate'] = params.startTime ? ym.init.getDateTime(params.startTime[0]).split(' ')[0] : '';\n      _data['endDate'] = params.startTime ? ym.init.getDateTime(params.startTime[1]).split(' ')[0] : '';\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + 'export_maintain_material_answer_log_list',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.UpdateTableAndVisible = false;\n              it.ISuccessfull(res.statusCode.msg);\n              location.href = token._j.URLS.Development_Server_ + res.path;\n              it.loading = false;\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.loading = false;\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"miniTurntableUA\", function miniTurntableUA(params, prize) {\n      //小程序大转盘配置查看， 奖品查看\n      if (prize) {\n        //奖品查看\n        this.formData.raffleName = params[0].raffleName;\n        this.formData.allowConsumeChance = params[0].allowConsumeChance;\n        this.formData.allowMemberConvert = params[0].allowMemberConvert;\n        this.formData.allowShareChance = params[0].allowShareChance;\n        this.formData.convertMilliliter = params[0].convertMilliliter;\n        this.formData.maxLuckyValue = params[0].maxLuckyValue;\n        this.formData.status = params[0].status;\n      } else {\n        this.formData.raffleName = params[0].raffleName;\n        this.formData.allowConsumeChance = params[0].allowConsumeChance;\n        this.formData.allowMemberConvert = params[0].allowMemberConvert;\n        this.formData.allowShareChance = params[0].allowShareChance;\n        this.formData.convertMilliliter = params[0].convertMilliliter;\n        this.formData.maxLuckyValue = params[0].maxLuckyValue;\n        this.formData.status = params[0].status;\n      }\n    }), _defineProperty(_methods, \"updateTurntableVersion\", function updateTurntableVersion() {\n      //大转盘版本升级，将会把所有用户数据记录重置\n      //  upgrade_sys_draw_raffle_version\n      var it = this;\n      ym.init.XML({\n        method: 'GET',\n        uri: token._j.URLS.Development_Server_ + 'upgrade_sys_draw_raffle_version',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.ISuccessfull(res.statusCode.msg);\n              it.list();\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"exportLogExe\", function exportLogExe(params) {\n      //导出预约记录\n      var it = this;\n      it.loading = true;\n      _data = Object.assign(_data, {\n        napeName: params.napeName || '',\n        status: params.status\n      });\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + 'export_pre_sell_nape_log_list',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.ISuccessfull(res.statusCode.msg);\n              location.href = token._j.URLS.Development_Server_ + res.path;\n              setTimeout(function () {\n                it.loading = false;\n              }, 1000);\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"appointmentPayEdesit\", function appointmentPayEdesit(params) {\n      //预约详情\n      var it = this;\n      _data = Object.assign(_data, {\n        preSellLogId: params\n      });\n      ym.init.XML({\n        method: 'GET',\n        uri: token._j.URLS.Development_Server_ + 'pre_sell_nape_log_detail',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.appointmentPay = {};\n              Object.keys(res.data).forEach(function (element, index) {\n                it.appointmentPay[element] = Object.values(res.data)[index];\n              });\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"appointmentPayGrant\", function appointmentPayGrant(params) {\n      //核销 发券\n      var it = this;\n      _data = Object.assign(_data, {\n        preSellLogId: params\n      });\n      ym.init.XML({\n        method: 'GET',\n        uri: token._j.URLS.Development_Server_ + 'pre_sell_grant',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.ISuccessfull(res.statusCode.msg);\n              delete _data['preSellLogId'];\n              it.TableAndVisible = false;\n              it.list();\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"appointmentPayGrantCancel\", function appointmentPayGrantCancel(params) {\n      //确认核销 信息【不发券】\n      var it = this;\n      _data = Object.assign(_data, {\n        preSellLogId: params\n      });\n      ym.init.XML({\n        method: 'GET',\n        uri: token._j.URLS.Development_Server_ + 'pre_sell_cancel',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.ISuccessfull(res.statusCode.msg);\n              delete _data['preSellLogId'];\n              it.list();\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"statusPrize\", function statusPrize(params) {\n      // 更改奖品状态\n      var it = this;\n      _data = Object.assign(_data, params);\n      ym.init.XML({\n        method: 'GET',\n        uri: token._j.URLS.Development_Server_ + 'change_sys_draw_item_info_status',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.ISuccessfull(res.statusCode.msg);\n              delete _data['itemId'];\n              it.list();\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"addressTableList\", function addressTableList(params) {\n      //查看单个用户地址\n      var it = this;\n      var xml = [];\n      _typeof(params) === 'object' ? params['page'] = it.pageTableNum : params['page'] = params;\n      _data = Object.assign(_data, params);\n      ym.init.XML({\n        method: 'GET',\n        uri: token._j.URLS.Development_Server_ + 'user_address_list',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              it.addressTables = [];\n\n              for (var i = 0; i < res.data.length; i++) {\n                // \n                xml.push({\n                  address: res.data[i].address,\n                  phone: res.data[i].phone,\n                  named: res.data[i].named\n                });\n              }\n\n              it.addressTables = xml; // page++;\n              // it.pageTimerOut = setTimeout(() => {\n              //     if (it.pageCount - page < 0) {  //页数 > 总页数\n              //       clearTimeout(it.pageTimerOut);\n              //       return false;\n              //     }\n              //     it.addressTableList(page);\n              //   }, 500);\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"marketingConfig\", function marketingConfig(params, name) {\n      //营销配置编辑\n      var it = this;\n\n      if (name) {\n        _data['adminId'] = params.adminId;\n        _data['adminMarketingConfigId'] = params.adminMarketingConfigId;\n        _data['allowGrant'] = params.allowGrant;\n        params.allowGrant != 1 ? null : _data['grantMilliliter'] = params.grantMilliliter > 0 && params.grantMilliliter < params.convertMilliliter ? params.grantMilliliter : it.IError('数值异常！');\n        _data['allowShare'] = params.allowShare;\n        params.allowShare != 1 ? null : _data['shareMilliliter'] = params.shareMilliliter > 0 && params.shareMilliliter < params.convertMilliliter ? params.shareMilliliter : it.IError('数值异常！');\n        _data['allowSignIn'] = params.allowSignIn;\n        params.allowSignIn != 1 ? null : _data['signInMilliliter'] = params.signInMilliliter > 0 && params.signInMilliliter < params.convertMilliliter ? params.signInMilliliter : it.IError('数值异常！');\n        _data['allowChangeCup'] = params.allowChangeCup;\n        params.allowChangeCup != 1 ? null : _data['changeMilliliter'] = params.changeMilliliter > 0 && params.changeMilliliter < params.convertMilliliter ? params.changeMilliliter : it.IError('数值异常！');\n        _data['convertMilliliter'] = params.convertMilliliter > 0 ? params.convertMilliliter : it.IError('数值异常！');\n        ym.init.XML({\n          method: 'POST',\n          uri: token._j.URLS.Development_Server_ + 'update_admin_marketing_config',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                it.ISuccessfull(res.statusCode.msg);\n                it.InputAndVisible = false;\n                it.list();\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      } else {\n        _data['adminMarketingConfigId'] = params;\n        ym.init.XML({\n          method: 'GET',\n          uri: token._j.URLS.Development_Server_ + 'admin_marketing_config_detail',\n          async: false,\n          xmldata: _data,\n          done: function done(res) {\n            try {\n              ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n                Object.keys(res.data).forEach(function (element, index) {\n                  it.formData[element] = Object.values(res.data)[index];\n                });\n                it.$forceUpdate(); //input 输入问题\n              }() : function () {\n                throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n              }();\n            } catch (error) {\n              it.IError(error);\n            }\n          }\n        });\n      }\n    }), _defineProperty(_methods, \"couponList\", function couponList(params) {\n      //用户礼券 窗口 列表\n      console.log(params);\n      var it = this; // params ? pasessionStorage.setItem('params', params.userId) : params.userId = sessionStorage.getItem('params');\n\n      _data['userId'] = params.userId;\n      _data['page'] = it.countPages;\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + 'find_user_couponList',\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              res.userCouponList.forEach(function (element, index) {\n                res.userCouponList[index].createTime = ym.init.getDateTime(element.createTime);\n              });\n              it.couponUnFormData = res.userCouponList;\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _defineProperty(_methods, \"exportMachineLog\", function exportMachineLog(_event, typeUrl) {\n      var it = this;\n      it.loading = true;\n      _event.machineNumber ? _data['machineNumber'] = _event.machineNumber : null;\n      _event.startTime ? _data['startTime'] = _event.startTime[0] : null;\n      _event.startTime ? _data['endTime'] = _event.startTime[1] : null;\n      _event.machineType ? _data['machineType'] = _event.machineType : null;\n      _event.status ? _data['status'] = _event.status : null;\n      ym.init.XML({\n        method: 'POST',\n        uri: token._j.URLS.Development_Server_ + typeUrl,\n        async: false,\n        xmldata: _data,\n        done: function done(res) {\n          try {\n            ym.init.RegCode(token._j.successfull).test(res.statusCode.status) ? function () {\n              setTimeout(function () {\n                it.loading = false;\n                it.UpdateTableAndVisible = false;\n              }, 500);\n              location.href = token._j.URLS.Development_Server_ + res.path;\n            }() : function () {\n              throw \"收集到错误：\\n\\n\" + res.statusCode.msg;\n            }();\n          } catch (error) {\n            it.IError(error);\n          }\n        }\n      });\n    }), _methods)\n  });\n}, false);\n\n//# sourceURL=webpack:///./src/public/javascripts/interactive/list.js?");

/***/ })

/******/ });